[gd_scene load_steps=7 format=3 uid="uid://catj35d1cnagp"]

[ext_resource type="Theme" uid="uid://b1f5fso0ajmoi" path="res://interface/theme.tres" id="1_6w3eh"]
[ext_resource type="Shader" path="res://shader/2DPerspective.gdshader" id="1_hhkvq"]
[ext_resource type="Texture2D" uid="uid://byetkxqw1stua" path="res://tile/png/255.png" id="2_wtupq"]

[sub_resource type="GDScript" id="GDScript_8qkpb"]
script/source = "
extends Button

@onready var tiles_bar_tile_popup_list = preload(\"res://interface/tiles_bar_tile_popup_list.tscn\")

@onready var texture_rect = $TextureRect
@onready var popup = $PopupPanel
@onready var popup_container = $PopupPanel/MarginContainer/PopupContainer

@export var tile_name : String
@export var tile_texture : Texture2D

var angle_x_max: float = 15.0
var angle_y_max: float = 15.0

var following_mouse: bool = false

var tween_rot: Tween
var tween_hover: Tween
var tween_destroy: Tween
var tween_handle: Tween

func _ready():
	texture_rect.texture = tile_texture
	
	angle_x_max = deg_to_rad(angle_x_max)
	angle_y_max = deg_to_rad(angle_y_max)
	
	popup.hide()
	
	var tile_data = load(\"res://tile/data/\"+tile_name+\".tres\")
	for cost in tile_data.price:
		if tile_data.price[cost] > 0:
			var popup_list = tiles_bar_tile_popup_list.instantiate()
			popup_list.icon = load(\"res://icon/resource/\"+cost+\".png\")
			popup_list.num = str(tile_data.price[cost])
			popup_container.add_child(popup_list)
			
func follow_mouse(delta):
	if not following_mouse: return
	var mouse_pos: Vector2 = get_global_mouse_position()
	global_position = mouse_pos - (size/2.0)

func handle_mouse_click(event):
	if not event is InputEventMouseButton: return
	if event.button_index != MOUSE_BUTTON_LEFT: return
	
	if event.is_pressed():
		following_mouse = true

func _on_gui_input(event):
	
	handle_mouse_click(event)
	
	# Don't compute rotation when moving the card
	if following_mouse: return
	if not event is InputEventMouseMotion: return
	
	# Handles rotation
	# Get local mouse pos
	var mouse_pos: Vector2 = get_local_mouse_position()
	var diff: Vector2 = (position + size) - mouse_pos

	var lerp_val_x: float = remap(mouse_pos.x, 0.0, size.x, 0, 1)
	var lerp_val_y: float = remap(mouse_pos.y, 0.0, size.y, 0, 1)

	var rot_x: float = rad_to_deg(lerp_angle(-angle_x_max, angle_x_max, lerp_val_x))
	var rot_y: float = rad_to_deg(lerp_angle(angle_y_max, -angle_y_max, lerp_val_y))
	
	texture_rect.material.set_shader_parameter(\"x_rot\", rot_y)
	texture_rect.material.set_shader_parameter(\"y_rot\", rot_x)

func _on_pressed():
	RuningData.choose_tile_name = tile_name
	
func _on_mouse_entered():
	if tween_hover and tween_hover.is_running():
		tween_hover.kill()
	tween_hover = create_tween().set_ease(Tween.EASE_OUT).set_trans(Tween.TRANS_ELASTIC)
	tween_hover.tween_property(self, \"scale\", Vector2(1.1, 1.1), 0.5)
	
	if popup_container.get_child_count() > 0:
		popup.show()

func _on_mouse_exited():
	# Reset rotation
	if tween_rot and tween_rot.is_running():
		tween_rot.kill()
	tween_rot = create_tween().set_ease(Tween.EASE_OUT).set_trans(Tween.TRANS_BACK).set_parallel(true)
	tween_rot.tween_property(texture_rect.material, \"shader_parameter/x_rot\", 0.0, 0.5)
	tween_rot.tween_property(texture_rect.material, \"shader_parameter/y_rot\", 0.0, 0.5)
	
	# Reset scale
	if tween_hover and tween_hover.is_running():
		tween_hover.kill()
	tween_hover = create_tween().set_ease(Tween.EASE_OUT).set_trans(Tween.TRANS_ELASTIC)
	tween_hover.tween_property(self, \"scale\", Vector2.ONE, 0.55)
	
	popup.hide()
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_r35ih"]
resource_local_to_scene = true
shader = ExtResource("1_hhkvq")
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/y_rot = 0.0
shader_parameter/x_rot = 0.0
shader_parameter/inset = 0.0

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_lu3j3"]
bg_color = Color(1, 1, 1, 0.25098)
corner_radius_top_left = 16
corner_radius_top_right = 16
corner_radius_bottom_right = 16
corner_radius_bottom_left = 16

[node name="Tile" type="Button"]
texture_filter = 1
custom_minimum_size = Vector2(64, 64)
offset_left = -32.0
offset_top = -32.0
offset_right = 32.0
offset_bottom = 32.0
pivot_offset = Vector2(32, 32)
flat = true
script = SubResource("GDScript_8qkpb")

[node name="Panel" type="Panel" parent="."]
texture_filter = 1
custom_minimum_size = Vector2(64, 64)
layout_mode = 2
offset_right = 64.0
offset_bottom = 64.0
theme = ExtResource("1_6w3eh")

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource("ShaderMaterial_r35ih")
layout_mode = 0
offset_right = 64.0
offset_bottom = 64.0
texture = ExtResource("2_wtupq")

[node name="PopupPanel" type="Panel" parent="."]
texture_filter = 1
layout_mode = 0
offset_left = -32.0
offset_top = -136.0
offset_right = 96.0
offset_bottom = -8.0
theme = ExtResource("1_6w3eh")
theme_override_styles/panel = SubResource("StyleBoxFlat_lu3j3")

[node name="MarginContainer" type="MarginContainer" parent="PopupPanel"]
layout_mode = 0
offset_right = 128.0
offset_bottom = 128.0
theme_override_constants/margin_left = 16
theme_override_constants/margin_top = 16
theme_override_constants/margin_right = 16
theme_override_constants/margin_bottom = 16

[node name="PopupContainer" type="VBoxContainer" parent="PopupPanel/MarginContainer"]
layout_mode = 2
alignment = 1

[connection signal="gui_input" from="." to="." method="_on_gui_input"]
[connection signal="mouse_entered" from="." to="." method="_on_mouse_entered"]
[connection signal="mouse_exited" from="." to="." method="_on_mouse_exited"]
[connection signal="pressed" from="." to="." method="_on_pressed"]
