[gd_scene load_steps=12 format=3 uid="uid://bl2tqtjaw3mdn"]

[ext_resource type="Shader" path="res://shader/2DPerspective.gdshader" id="1_6pghr"]
[ext_resource type="Theme" uid="uid://b1f5fso0ajmoi" path="res://interface/theme.tres" id="1_k4sp6"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7vlgo"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_x381x"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_lvf1c"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_12stu"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_2snuw"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_gw3fg"]

[sub_resource type="GDScript" id="GDScript_ly00d"]
script/source = "
@tool
extends Button

signal put_back()

@export var color: Color:
	set(new_val):
		color = new_val
		$SubViewportContainer/SubViewport/Card.self_modulate = color
	get:
		return color

@export var threshold: float = 100.0
@export var threshold_speed: float = 200.0
@export var use_speed: bool = true

var tween_grab: Tween
var tween_movement: Tween
var picked_up: bool = false
var offset: Vector2
var is_3D: bool = false
var last_speed: float = 0.0

@onready var original_position: Vector2 = global_position

func _ready() -> void:
	set_process(false)
	pivot_offset = size / 2.0
	
func _process(delta: float) -> void:
	if Engine.is_editor_hint(): return
	global_position = get_global_mouse_position() + offset

func set_3D_rotation_x(x: float) -> void:
	$SubViewportContainer.material.set_shader_parameter(\"x_rot\", x)
	
func set_3D_rotation_y(y: float) -> void:
	$SubViewportContainer.material.set_shader_parameter(\"y_rot\", y)

func _on_button_down() -> void:
	if Engine.is_editor_hint(): return
	offset = global_position - get_global_mouse_position()
	picked_up = true
	set_process(true)
	if tween_grab and tween_grab.is_running():
		tween_grab.kill()
	tween_grab = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
	tween_grab.tween_property(self, \"scale\", Vector2(1.1, 1.1), 0.15)

func _on_button_up() -> void:
	if Engine.is_editor_hint(): return
	picked_up = false
	set_process(false)
	var dist: float = abs(original_position.y - global_position.y)
	# print(\"Distance: \", dist)
	
	if use_speed:
		if last_speed <= -threshold_speed:
			# Go to new position
			put_back.emit()
			if tween_movement and tween_movement.is_running():
				tween_movement.kill()
			tween_movement = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
			if is_3D:
				tween_movement.tween_method(set_3D_rotation_x, 0.0, 360.0, 0.5)
			else:
				tween_movement.tween_property(self, \"rotation_degrees\", 360.0, 0.4).from(0.0)
		else:
			if tween_grab and tween_grab.is_running():
				tween_grab.kill()
			tween_grab = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
			tween_grab.tween_property(self, \"scale\", Vector2.ONE, 0.15)
			
			if tween_movement and tween_movement.is_running():
				tween_movement.kill()
			tween_movement = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
			tween_movement.tween_property(self, \"global_position\", original_position, 0.3)
	else:
		if dist > threshold:
			# Go to new position
			put_back.emit()
			if tween_movement and tween_movement.is_running():
				tween_movement.kill()
			tween_movement = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
			if is_3D:
				tween_movement.tween_method(set_3D_rotation_x, 0.0, 360.0, 0.5)
			else:
				tween_movement.tween_property(self, \"rotation_degrees\", 360.0, 0.4).from(0.0)
		else:
			if tween_grab and tween_grab.is_running():
				tween_grab.kill()
			tween_grab = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
			tween_grab.tween_property(self, \"scale\", Vector2.ONE, 0.15)
			
			if tween_movement and tween_movement.is_running():
				tween_movement.kill()
			tween_movement = create_tween().set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_CUBIC)
			tween_movement.tween_property(self, \"global_position\", original_position, 0.3)

func _on_gui_input(event: InputEvent) -> void:
	if not picked_up: return
	if event is InputEventMouseMotion:
		# print(\"speed: \", event.velocity)
		last_speed = event.velocity.y
			
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_h8f7k"]
shader = ExtResource("1_6pghr")
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/y_rot = 0.0
shader_parameter/x_rot = 0.0
shader_parameter/inset = 0.0

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_ievbb"]
bg_color = Color(1, 1, 1, 1)
corner_radius_top_left = 16
corner_radius_top_right = 16
corner_radius_bottom_right = 16
corner_radius_bottom_left = 16

[node name="ModeCard" type="Button"]
texture_filter = 1
material = SubResource("ShaderMaterial_7vlgo")
theme_override_styles/normal = SubResource("StyleBoxEmpty_x381x")
theme_override_styles/hover = SubResource("StyleBoxEmpty_lvf1c")
theme_override_styles/pressed = SubResource("StyleBoxEmpty_12stu")
theme_override_styles/disabled = SubResource("StyleBoxEmpty_2snuw")
theme_override_styles/focus = SubResource("StyleBoxEmpty_gw3fg")
flat = true
script = SubResource("GDScript_ly00d")

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
material = SubResource("ShaderMaterial_h8f7k")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
pivot_offset = Vector2(128, 64)

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(256, 128)
render_target_update_mode = 4

[node name="Card" type="Panel" parent="SubViewportContainer/SubViewport"]
offset_right = 256.0
offset_bottom = 128.0
mouse_filter = 2
theme = ExtResource("1_k4sp6")
theme_override_styles/panel = SubResource("StyleBoxFlat_ievbb")

[connection signal="button_down" from="." to="." method="_on_button_down"]
[connection signal="button_up" from="." to="." method="_on_button_up"]
[connection signal="gui_input" from="." to="." method="_on_gui_input"]
